name: Release Package

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # Paso de diagnóstico super detallado
      - name: Super detailed diagnostic
        run: |
          echo "===== WORKSPACE ROOT CONTENTS ====="
          ls -la
          
          echo "===== CHECKING FOR BANK DIRECTORY (EXACT CASE) ====="
          find . -maxdepth 1 -type d -name "Bank" | wc -l
          
          echo "===== CHECKING FOR ANY CASE OF BANK ====="
          find . -maxdepth 1 -type d -iname "bank" | wc -l
          
          echo "===== LISTING ALL DIRECTORIES ====="
          find . -maxdepth 1 -type d
          
          echo "===== FINDING ALL .SLN FILES IN REPO ====="
          find . -name "*.sln"
          
          echo "===== FINDING ALL .CSPROJ FILES IN REPO ====="
          find . -name "*.csproj"
          
          echo "===== EXAMINE THE BANK DIRECTORY ====="
          ls -la Bank/

      # Usando la ruta explícita que vimos en tu estructura
      - name: Restore dependencies with explicit path
        run: |
          # Prueba con ruta completa absoluta
          REPO_ROOT=$(pwd)
          echo "Repositorio raíz: $REPO_ROOT"
          
          if [ -f "$REPO_ROOT/Bank/Bank.sln" ]; then
            echo "Encontrada solución en $REPO_ROOT/Bank/Bank.sln"
            cd Bank
            dotnet restore Bank.sln
          else
            echo "No se encontró la solución en la ruta esperada"
            # Búsqueda alternativa
            SOLUTION_PATH=$(find . -name "Bank.sln" -type f | head -n 1)
            if [ -n "$SOLUTION_PATH" ]; then
              echo "Solución encontrada en: $SOLUTION_PATH"
              dotnet restore "$SOLUTION_PATH"
            fi
          fi

      # Compilar con la ruta explícita
      - name: Build
        if: success()
        run: |
          if [ -f "Bank/Bank.sln" ]; then
            cd Bank
            dotnet build Bank.sln --configuration Release
          fi

      # Empaquetar el proyecto WebApi
      - name: Pack
        if: success()
        run: |
          if [ -f "Bank/Bank.WebApi/Bank.WebApi.csproj" ]; then
            cd Bank
            dotnet pack Bank.WebApi/Bank.WebApi.csproj --configuration Release --output ../nupkg
          fi

      # Publicar el paquete
      - name: Create GitHub Release
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          files: nupkg/*.nupkg